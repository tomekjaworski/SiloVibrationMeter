
#if 0


	// przelaczenie SPI na 16 bitow
	SPI2STATbits.SPIEN = 0;
	while(SPI2STATbits.SPITBF);	
	SPI2CON1bits.MODE16 = 1; // 16 bitów
	SPI2STATbits.SPIEN = 1;
	while(SPI2STATbits.SPITBF);	

	dac.command = 0x0000;
	dac.SHDN = 1;
	dac.GA = 1;
	
	#define SET_REF(ref, cmd16) {ref = 0;  dummy = SPI2BUF;	SPI_SEND_AND_WAIT((cmd16));ref = 1;}

	CS_REF1 = 0;
	dummy = SPI2BUF;
	SPI_SEND_AND_WAIT(dac.command);
	CS_REF1 = 1;
	

	
	SET_REF(CS_REF1, dac.command);
	SET_REF(CS_REF2, dac.command);
	SET_REF(CS_REF3, dac.command);
#endif

#if 0

	dac.command = 0x0000;
	dac.SHDN = 1;
	dac.GA = 1;
	
	//CS_REF = 1;
	//CS_AMP = 1;
	
	__delay32(1000);
	
	CS_REF1 = 0;
	dummy = SPI2BUF;
	SPI_SEND_AND_WAIT(dac.command);
	CS_REF1 = 1;
	
	asm("nop");
	asm("nop");
	asm("nop");

	dac.value = 1310;	
	CS_REF1 = 0;
	dummy = SPI2BUF;
	SPI_SEND_AND_WAIT(dac.command);
	CS_REF1 = 1;	
	
//	amp.command = 0x0000;
//	amp.A0 = 0; // rejestr wzmocnienia
//	amp.MODE = 0b010; // zapis do rejestru
//	amp.GAIN = 0x00;
//	
//	CS_AMP = 0;
//	dummy = SPI2BUF;
//	SPI_SEND_AND_WAIT(amp.command);
//	CS_AMP = 1;	



	SPI2STATbits.SPIEN = 0;
	while(SPI2STATbits.SPITBF);	





AMP_ResetSPI();
	
while(1)
{
	asm("nop");
	asm("nop");
	asm("nop");

	__delay32(100);
	
	
	amp.command = 0x0000;
	amp.A0 = 0; // rejestr wzmocnienia
	amp.MODE = 0b010; // zapis do rejestru
	amp.GAIN = 0x03;

	AMP_WriteSPI16(amp.command);

//	
//	CS_AMP = 0;
//	dummy = SPI2BUF;
//	SPI_SEND_AND_WAIT(amp.command);
//	CS_AMP = 1;	

	
	asm("nop");
	asm("nop");
	asm("nop");
}

//	AD1CON1bits.ADON = 0;
//
//
//	// kana³ 0 to Ÿród³o referencyjne
//	AD1CHS0bits.CH0SA = 1;
//	AD1CHS0bits.CH0SB = 2;
//	AD2CHS0bits.CH0SA = 3;
//	AD2CHS0bits.CH0SB = 4;
//
//	AD1CON2bits.ALTS = 1;
//	AD1CON2bits.SMPI = 1;
//	AD1CON1bits.ADDMABM = 1;
//
//	AD1CON1bits.ADON = 1;
//
//	DMA0CONbits.AMODE = 0; // Configure DMA for Register indirect with post increment
//	DMA0CONbits.MODE = 2; // Configure DMA for Continuous Ping-Pong mode
//	
//	DMA0PAD = (unsigned short)&ADC1BUF0;
//	DMA0CNT = 1;
//	DMA0REQ = 13; // adc1
//	
//	DMA0STA = __builtin_dmaoffset(s1);
//	DMA0STB = __builtin_dmaoffset(s2);
//	
//	IFS0bits.DMA0IF = 0; 
//	IEC0bits.DMA0IE = 1; 
//	DMA0CONbits.CHEN = 1;
	

	
	long i = 0;
	tab_ptr = tab;
	tab_end = tab + sizeof(tab) / sizeof(WORD);
	while(1)
	{
		LED0 = 0;
		__delay32(15000);
		
		//AD1CHS0bits.CH0SB = 4;
		
		AD1CON1bits.DONE = 0;
//		AD2CON1bits.DONE = 0;
		while(!AD1CON1bits.DONE);
//		while(!AD2CON1bits.DONE);
		
		unsigned short a1;
		a1 = ADC1BUF0;
//		a2 = ADC2BUF0;

		
		
		*tab_ptr = a1;
		tab_ptr++;
		if (tab_ptr == tab_end)
		{
			LED0 = 1;
			//i = 0;
			tab_ptr = tab;
			asm("nop");
			asm("nop");
			asm("nop");
		}	
		
	}	
	
//	while(1);
#endif